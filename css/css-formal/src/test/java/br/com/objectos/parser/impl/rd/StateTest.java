/*
 * Copyright (C) 2017-2023 Objectos Software LTDA.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.com.objectos.parser.impl.rd;

import static br.com.objectos.formal.testing.Digit.D0;
import static br.com.objectos.formal.testing.Letter.A;
import static br.com.objectos.formal.testing.driven.Keyword.GIVEN;

import br.com.objectos.formal.testing.ComplexSingle;
import br.com.objectos.formal.testing.HasDigits;
import br.com.objectos.formal.testing.HasLetters;
import br.com.objectos.formal.testing.driven.Scenario;
import br.com.objectos.formal.testing.driven.StepText;
import br.com.objectos.parser.testing.grammar.Formal0013ParserGrammar;
import br.com.objectos.parser.testing.grammar.Goal;
import br.com.objectos.parser.testing.grammar.Grammar00;
import br.com.objectos.parser.testing.grammar.Grammar06;
import br.com.objectos.parser.testing.grammar.HasDigitAndLetter;
import br.com.objectos.parser.testing.grammar.TrackbackKeyword;
import br.com.objectos.parser.testing.grammar.TrackbackSymbol;
import br.com.objectos.parser.testing.grammar.TrackbackTestingParserGrammar;
import br.com.objectos.parser.testing.grammar.TrackbackValueType;
import java.util.Arrays;
import org.testng.annotations.Test;

public class StateTest extends StateDriver {

  @Test
  public void grammar0_HasLetters() {
    it().givenGrammar(new Grammar00())
        .givenSource(A)
        .givenGoalState(HasLetters.class)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<HasLetters>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<HasLetters> -> Letter")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Letter")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenTokenList(A)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenEofState()
        /**/.hasResult(HasLetters.hasOne(A));
  }

  @Test
  public void grammar6_ComplexSingle_digitAndLetter() {
    HasDigitAndLetter d0A = new HasDigitAndLetter(D0, A);

    it().givenGrammar(new Grammar06())
        .givenSource(D0, A)
        .givenGoalState(ComplexSingle.class)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<ComplexSingle>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<ComplexSingle> -> <HasSomething>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<HasSomething>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<HasSomething> -> <HasDigits>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<HasDigits>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasPosition(2, 0)
        /**/.hasProduction("<HasDigits> -> Digit")
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Digit")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList(D0)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <HasDigits>
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTokenList(D0)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <HasSomething>
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenTokenList(D0)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <ComplexSingle>
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenEofState()
        /**/.hasResult(ComplexSingle.of(HasDigits.of(D0)))
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(D0)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("<HasSomething> -> <HasLetters>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<HasLetters>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<HasLetters> -> Letter")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Letter")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(D0)
        /**/.thenProductionState()
        /**/.hasIndex(2)
        /**/.hasProduction("<HasSomething> -> <HasDigitAndLetter>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<HasDigitAndLetter>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<HasDigitAndLetter> -> Digit Letter")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Digit")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList(D0)
        /**/.thenTrackbackList()
        /**/.thenTerminalState()
        /**/.hasTerminal("Letter")
        /**/.hasPosition(3, 1)
        .whenNext()
        /**/.thenTokenList(D0, A)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <HasDigitAndLetter>
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTokenList(D0, A)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <HasSomething>
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenTokenList(D0, A)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // matched <ComplexSingle>
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenEofState()
        /**/.hasResult(ComplexSingle.of(d0A));
  }

  @Test
  public void formal0013_aScenarioWithASingleStep() {
    StepText a = new StepText("a");

    it().givenGrammar(new Formal0013ParserGrammar())
        .givenSource(GIVEN, a)
        .givenGoalState(Scenario.class)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Scenario>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Scenario> -> <Step>+")
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>+")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step>+ -> <Step> <Step>+") // <Step>+(0)(x)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step> -> Keyword StepText+")
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Keyword")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList(GIVEN)
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("StepText+")
        /**/.hasPosition(3, 1)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("StepText+ -> StepText StepText+") // StepText+(0)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("StepText+")
        /**/.hasPosition(4, 1)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("StepText+ -> StepText StepText+") // StepText+(0)(0)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        /**/.hasPosition(5, 0)
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("StepText+ -> StepText") // StepText+(0)(1)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        /**/.hasPosition(5, 0)
        .whenNext()
        /**/.thenTokenList(GIVEN)
        /**/.thenTrackbackList(a)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("StepText+ -> StepText") // StepText+(0)(o)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        /**/.hasPosition(3, 1) // <Step> -> Keyword (0) StepText+ (1)
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        /**/.hasPosition(2, 0) // <Step>+ -> <Step> (0) <Step>+ (1)

        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>+")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step>+ -> <Step> <Step>+") // i10 (should fail)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step> -> Keyword StepText+")
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenTerminalState()
        /**/.hasTerminal("Keyword")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("<Step>+ -> <Step>") // i11 (should fail)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step> -> Keyword StepText+")
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Keyword")// should fail all the way back to e0
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(GIVEN, a)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("<Step>+ -> <Step>")
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Step>")

        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Step> -> Keyword StepText+")
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("Keyword")
        .whenNext()
        /**/.thenTokenList(GIVEN)
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("StepText+")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("StepText+ -> StepText StepText+") // StepText+(0)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("StepText+")
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("StepText+ -> StepText StepText+") // StepText+(0)(0)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("StepText+ -> StepText") // StepText+(0)(1)(x)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        .whenNext()
        /**/.thenTokenList(GIVEN)
        /**/.thenTrackbackList(a)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("StepText+ -> StepText") // StepText+(0)(o)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("StepText")
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // <Step> -> Keyword (0) StepText+ (1)
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        .whenNext()
        /**/.thenTokenList(GIVEN, a)
        /**/.thenTrackbackList()
        /**/.thenMatchedState()
        .whenNext()
        /**/.thenEofState()
        /**/.hasResult(new Scenario(Arrays.asList(GIVEN.step(a))));
  }

  @Test
  public void trackbackTesting() {
    TrackbackValueType length = TrackbackValueType.get("length");
    TrackbackKeyword inherit = TrackbackKeyword.get("inherit");

    // Optional optional = new Optional(length);
    // And and = new And(length, optional);
    // Or or = new Or(and, inherit);
    // Goal goal = new Goal(or);

    it().givenGrammar(TrackbackTestingParserGrammar.get())
        .givenSource(length, length, TrackbackSymbol.OPTIONAL, TrackbackSymbol.OR, inherit)
        .givenGoalState(Goal.class)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Goal>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Goal> -> <TrackbackTestingRule>")
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<TrackbackTestingRule>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<TrackbackTestingRule> -> <TrackbackKeyword>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<TrackbackKeyword>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<TrackbackKeyword> -> TrackbackKeyword")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("TrackbackKeyword")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList()
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("<TrackbackTestingRule> -> <TrackbackValueType>")
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<TrackbackValueType>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<TrackbackValueType> -> TrackbackValueType")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("TrackbackValueType")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTokenList(length)
        /**/.thenMatchedState() // <TrackbackValueType> -> TrackbackValueType
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenMatchedState() // <TrackbackTestingRule> ->
                                // <TrackbackValueType>
        /**/.hasPosition(1, 0)
        .whenNext()
        /**/.thenMatchedState() // <Goal> -> <TrackbackTestingRule>
        /**/.hasPosition(0, 0)
        .whenNext()
        /**/.thenTokenList(length)
        /**/.thenTrackbackList()
        /**/.thenEofState()
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(length)
        /**/.thenProductionState()
        /**/.hasIndex(2)
        /**/.hasProduction("<TrackbackTestingRule> -> <Or>")
        /**/.hasValueList()
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<Or>")
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<Or> -> <OrCombinable> TrackbackSymbol'OR' <OrCombinable>")
        /**/.hasValueList()
        /**/.hasPosition(2, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<OrCombinable>") // <OrCombinable>[0]
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<OrCombinable> -> <TrackbackKeyword>")
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<TrackbackKeyword>")
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<TrackbackKeyword> -> TrackbackKeyword")
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("TrackbackKeyword")
        /**/.hasPosition(5, 0)
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(length)
        /**/.thenProductionState()
        /**/.hasIndex(1)
        /**/.hasProduction("<OrCombinable> -> <TrackbackValueType>")
        /**/.hasValueList()
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenNonTerminalState()
        /**/.hasNonTerminal("<TrackbackValueType>")
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenProductionState()
        /**/.hasIndex(0)
        /**/.hasProduction("<TrackbackValueType> -> TrackbackValueType")
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("TrackbackValueType")
        /**/.hasPosition(5, 0)
        .whenNext()
        /**/.thenTokenList(length)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // <TrackbackValueType> -> TrackbackValueType
        /**/.hasPosition(4, 0)
        .whenNext()
        /**/.thenTokenList(length)
        /**/.thenTrackbackList()
        /**/.thenMatchedState() // <OrCombinable> -> <TrackbackValueType>
        /**/.hasPosition(3, 0)
        .whenNext()
        /**/.thenTerminalState()
        /**/.hasTerminal("TrackbackSymbol'OR'")
        /**/.hasPosition(3, 1)
        .whenNext()
        /**/.thenTokenList()
        /**/.thenTrackbackList(length, length)
        /**/.thenProductionState()
        /**/.hasIndex(2)
        /**/.hasProduction("<OrCombinable> -> <Optional>")
        /**/.hasValueList() // TODO parent valueList should be empty
        /**/.hasPosition(3, 0);
  }

}